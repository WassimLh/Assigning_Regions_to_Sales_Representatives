% Initializing distance matrix
distances = xlsread('C:\Users\Abdou\Desktop\distances');
vec_distances = reshape(distances',22*22,1);

% Defining global variables
epsilon = 10^(-4); % epsilon-Constraint
alpha = 0.8; %Workload fairness
beta = 1.2;
a = 0.2; %Distance fairness
b = 0.3;
p = 4; % Number of available SRs


%--------------------------------------------------------------------------
% Data initialization
% Initializing past assignments matrix
past = zeros(22,23);
past(4,[4 5 6 7 8 15 23])=1;
past(14,[10 11 12 13 14 23])=1;
past(16,[9 16 17 18 23])=1;
past(22,[1 2 3 19 20 21 22 23])=1;
vec_past = reshape(past',22*23,1);

% Initializing index values matrix
index11 = [0.1609 0.1164 0.1026 0.1516 0.0939 0.1320 0.0687 0.0930 0.2116 0.2529 0.0868];
index22 = [0.0828 0.0975 0.8177 0.4115 0.3795 0.0710 0.0427 0.1043 0.0997 0.1698 0.2531];
s_index = [index11, index22];
index = [repmat([index11, index22],22,1); zeros(1, 22)];
%vec_index = reshape(index,88,1);


%--------------------------------------------------------------------------
% Defining cost matrix
cost_matrix = zeros(23*22,1);
for i = 1:22
    cost_matrix((23*(i-1)+1):(23*i-1)) = distances(i,:)';
end
cost_matrix;

% Validation of cost matrix and past assignments
%cost_matrix'*vec_past;              % answer = 187.41


%--------------------------------------------------------------------------
% Defining equality matrices
% Setting the number of SR
E1 = zeros(1,23*22);
for i = 1:22
    E1(1, 23*i)=1;
end
e1 = p;

% Each brick should be assigned to only one SR
E2 = repmat([eye(22) zeros(22,1)],1,22);
e2 = ones(22,1);

% Each SR with central brick i should be assigned brick i (MANDATORY IF YOU WANT 1ST OR SECOND FORMULATION !!!!!!!!!!)
E3 = zeros(22, 23*22);
for i = 1:22
   E3(i, 23*(i-1)+i)=-1;
   E3(i, 23*(i-1)+23)=1;
end
e3 = zeros(22,1);

% Setting 4,12,16 and 22 as central bricks
E4 = zeros(1,22*23);
E4(23*4)=1;
E5 = zeros(1,22*23);
E5(23*16)=1;
E6 = zeros(1,22*23);
E6(23*14)=1;
E7 = zeros(1,22*23);
E7(23*22)=1;

%Reassembling left-hand equality matrix
E = [E1; E2];

%Reassembling right-hand equality matrix
e = [e1; e2];


%--------------------------------------------------------------------------
% Defining inequality matrices
% Right-hand term for workload fairness ('beta')
I1 = zeros(22,23*22);
for i = 1:22
   I1(i, (23*(i-1)+1):(23*i-1)) = s_index; 
end
i1 = beta*ones(22,1);

% Left-hand term for workload fairness ('alpha')
I2 = zeros(22,23*22);
for i = 1:22
   I2(i, (23*(i-1)+1):(23*i-1)) = -s_index; 
   I2(i, 23*i)=1;
end
i2 = (-alpha+1)*ones(22,1);

%Range [0,1]
I3 = eye(23*22);
i3 = ones(23*22,1);
I4 = -eye(23*22);
i4 = zeros(23*22,1);

% Nullity of rows that are not considered as central bricks
I5 = zeros(22,22*23);
for i = 1:22
   I5(i,(23*(i-1)+1):(23*i-1))= ones(22,1);
   I5(i, 23*i)=-24;
end
i5 = zeros(22,1);

% Right-hand term for distance fairness ('b')
I6 = zeros(22,22*23);
for i = 1:22
    I6(i,(23*(i-1)+1):(23*i-1)) = distances(i,:);
    I6(i,:) = I6(i,:) - b*cost_matrix';  
end
i6 = zeros(22,1);

% Left-hand term for workload fairness ('a')
I7 = zeros(22,22*23);
for i = 1:22
   I7(i,(23*(i-1)+1):(23*i-1)) = - distances(i,:);
   I7(i,:) = I7(i,:) + a*cost_matrix';
   I7(i, 23*i)=I7(i, 23*i)+(4*10^3);
end
i7 = (4*10^3)*ones(22,1);

% Epsilon contraint for disruption
I8 = zeros(1, 23*22);
for i = 1:22
    I8((23*(i-1)+1):(23*i)) = 1/2*[s_index 0].*(1-2*past(i,:));
end
%i8 = disruption - 2 - epsilon;

% Reassembling left-hand inequality matrix
I = [I1; I2; I3; I4; I5; I6; I7];

% Reassembling right-hand inequality matrix
i = [i1; i2; i3; i4; i5; i6; i7];


%--------------------------------------------------------------------------
% Resolving the problem
[optimal_x,optimal_f] = intlinprog(cost_matrix, 1:506, I, i, E, e);
solution_reshaped = reshape(optimal_x, 23, 22)';
optimal_f;

% Solution_transformed keep only non-zero rows (it's a 4x23 matrix) 
solution_transformed = zeros(4,23);
vec_sum = sum(solution_reshaped,2);
j=1;
for i = 1:22
    if vec_sum(i)>0
        solution_transformed(j,:)=solution_reshaped(i, :);
        j=j+1;
    end
end

% This vector will keep track of the disruption calculated on each
% combination
vec_disr = zeros(factorial(p),1); % p=4 in a first approach

% Central bricks of SR1, SR2, SR3, SR4 respectively
central_bricks = [4 14 16 22];

% All possible combinations for p=4
combination = [[1 2 3 4] [1 2 4 3] [1 3 2 4] [1 3 4 2] [1 4 2 3] [1 4 3 2]];
combination = [combination [2 1 3 4] [2 1 4 3] [2 3 1 4] [2 3 4 1] [2 4 1 3] [2 4 3 1]];
combination = [combination [3 1 2 4] [3 1 4 2] [3 2 1 4] [3 2 4 1] [3 4 1 2] [3 4 2 1]];
combination = [combination [4 1 2 3] [4 1 3 2] [4 2 1 3] [4 2 3 1] [4 3 1 2] [4 3 2 1]];

%---------------------------------------------------------------------------------------------------------------------------
% We calculate the disruption for each combination. If p=4, there are 24
% possible combinations
abs_diff = solution_transformed+past(central_bricks([1 2 3 4]),:)-2*solution_transformed.*past(central_bricks([1 2 3 4]),:);
vec_disr(1) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([1 2 4 3]),:)-2*solution_transformed.*past(central_bricks([1 2 4 3]),:);
vec_disr(2) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([1 3 2 4]),:)-2*solution_transformed.*past(central_bricks([1 3 2 4]),:);
vec_disr(3) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([1 3 4 2]),:)-2*solution_transformed.*past(central_bricks([1 3 4 2]),:);
vec_disr(4) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([1 4 2 3]),:)-2*solution_transformed.*past(central_bricks([1 4 2 3]),:);
vec_disr(5) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([1 4 3 2]),:)-2*solution_transformed.*past(central_bricks([1 4 3 2]),:);
vec_disr(6) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 1 3 4]),:)-2*solution_transformed.*past(central_bricks([2 1 3 4]),:);
vec_disr(7) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 1 4 3]),:)-2*solution_transformed.*past(central_bricks([2 1 4 3]),:);
vec_disr(8) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 3 1 4]),:)-2*solution_transformed.*past(central_bricks([2 3 1 4]),:);
vec_disr(9) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 3 4 1]),:)-2*solution_transformed.*past(central_bricks([2 3 4 1]),:);
vec_disr(10) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 4 1 3]),:)-2*solution_transformed.*past(central_bricks([2 4 1 3]),:);
vec_disr(11) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([2 4 3 1]),:)-2*solution_transformed.*past(central_bricks([2 4 3 1]),:);
vec_disr(12) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 1 2 4]),:)-2*solution_transformed.*past(central_bricks([3 1 2 4]),:);
vec_disr(13) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 1 4 2]),:)-2*solution_transformed.*past(central_bricks([3 1 4 2]),:);
vec_disr(14) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 2 1 4]),:)-2*solution_transformed.*past(central_bricks([3 2 1 4]),:);
vec_disr(15) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 2 4 1]),:)-2*solution_transformed.*past(central_bricks([3 2 4 1]),:);
vec_disr(16) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 4 1 2]),:)-2*solution_transformed.*past(central_bricks([3 4 1 2]),:);
vec_disr(17) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([3 4 2 1]),:)-2*solution_transformed.*past(central_bricks([3 4 2 1]),:);
vec_disr(18) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 1 2 3]),:)-2*solution_transformed.*past(central_bricks([4 1 2 3]),:);
vec_disr(19) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 1 3 2]),:)-2*solution_transformed.*past(central_bricks([4 1 3 2]),:);
vec_disr(20) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 2 1 3]),:)-2*solution_transformed.*past(central_bricks([4 2 1 3]),:);
vec_disr(21) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 2 3 1]),:)-2*solution_transformed.*past(central_bricks([4 2 3 1]),:);
vec_disr(22) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 3 1 2]),:)-2*solution_transformed.*past(central_bricks([4 3 1 2]),:);
vec_disr(23) = 1/2*sum(abs_diff*[s_index 0]');

abs_diff = solution_transformed+past(central_bricks([4 3 2 1]),:)-2*solution_transformed.*past(central_bricks([4 3 2 1]),:);
vec_disr(24) = 1/2*sum(abs_diff*[s_index 0]');
%---------------------------------------------------------------------------------------------------------------------------

% We calculate the minimum of disruption
i = 1;
min = 10^4;
for j = 1:24
    % If it's useful, you can plot all possible disruption values
    % display(vec_disr(j));
    if vec_disr(j)<min
        i = j;
        min = vec_disr(j);
    end
end

% Getting indidual workloads
index_value_modified = [s_index,0];
individual_workloads = solution_transformed*index_value_modified';

% Getting individual distances
individual_distances = [];
Dist_modified = [distances;zeros(1,22)];
test_distance = solution_reshaped*Dist_modified;
individual_distances = [];
for l = 1:22
    if test_distance(l,l) > 0
        individual_distances = [individual_distances,test_distance(l,l)];
    end
end

% Display results
disp('Individual distances:')
disp(individual_distances)

disp ('Total distance')
disp(optimal_f)

disp('Individual percentage of total distance:')
disp(individual_distances/optimal_f)

disp('Individual workloads:')
disp(individual_workloads')

disp('Individual percentage of total workload:')
disp(individual_workloads'/4)

disp('Disruption');
disp(min); % Displaying the disruption minimum
disp('Combination of SR'); % Gives the order in which the solutions should be taken in consideration to minimize
                           % disruption
display(combination((4*(i-1)+1):4*i)); % Displaying the corresponding combination

    
